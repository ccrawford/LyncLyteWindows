<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:controls="clr-namespace:Microsoft.Lync.Controls;assembly=Microsoft.Lync.Controls"
        xmlns:local="clr-namespace:LyncWPFApplication3"
		xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:dd="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
		xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" 
        x:Class="LyncWPFApplication3.NiceConfig"
        
    
        Title="{Binding appName}" Height="485" Width="895" Icon="{Binding iconName}" WindowStyle="None" ResizeMode="NoResize" SizeToContent="Width" >
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <local:LightToIconFilenameConverter x:Key="LightToIconFilenameConverter" />
        <local:LightToIcoFilenameConverter x:Key="LightToICOFilenameConverter" />
        <local:StringToResourceConverter x:Key="StringToResourceConverter" />
        <local:ComStatusToImage x:Key="ComStatusToImageConverter" />
        <local:ShowWindowCommand x:Key="ShowWindow" />
        <local:GenericBooleanToVisibilityConverter x:Key="USBErrorImageConverter" True="Collapsed" False="Visible" />
        <SolidColorBrush x:Key="TitleBarBrush" Color="#FF323232"/>
        <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFA6A6A6"/>
        <SolidColorBrush x:Key="TitleForegroundBrush" Color="#FFC7C7C7"/>
        <SolidColorBrush x:Key="PanelBackgroundBrush" Color="#FFF0F0F0"/>
        <SolidColorBrush x:Key="ItemGroupingBoxBrush" Color="#FFE0E0E0"/>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="TabItem.Static.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#F0F0F0" Offset="0.0"/>
            <GradientStop Color="#E5E5E5" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="TabItem.Static.Border" Color="#ACACAC"/>
        <LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#ECF4FC" Offset="0.0"/>
            <GradientStop Color="#DCECFC" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA"/>
        <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0"/>
        <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9"/>
        <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
        <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
        <Style x:Key="FatTabStyle" TargetType="{x:Type TabItem}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Background" Value="{StaticResource TabItem.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="Padding" Value="6,2,6,2"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                            <Border x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" Margin="0" MinWidth="120" MinHeight="35">
                                <Border x:Name="innerBorder" BorderBrush="{StaticResource TabItem.Selected.Border}" BorderThickness="1,1,1,0" Background="{StaticResource TabItem.Selected.Background}" Margin="-1" Opacity="0"/>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1"/>
                                <Setter Property="Margin" Value="-2,-2,0,-2"/>
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1"/>
                                <Setter Property="Margin" Value="-2,0,-2,-2"/>
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1"/>
                                <Setter Property="Margin" Value="0,-2,-2,-2"/>
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1"/>
                                <Setter Property="Margin" Value="0,-2,-2,0"/>
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="FieldTitleBrush" Color="#FF6E6E6E"/>
        <Style x:Key="TabStyle" TargetType="{x:Type TabControl}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid KeyboardNavigation.TabNavigation="Local">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <!-- TabPanel is a layout container which allows the TabItems to wrap and re-order when selected
						The implementation knows to use this control because it is marked IsItemsHost = True -->
                            <TabPanel Grid.Row="0" Margin="0,0,4,-1" x:Name="HeaderPanel" Background="Transparent" IsItemsHost="True" Panel.ZIndex="1" KeyboardNavigation.TabIndex="1"/>

                            <Border Grid.Row="1" x:Name="Border" Background="{DynamicResource TabItem.Disabled.Background}" BorderBrush="{DynamicResource LightBorderBrush}" BorderThickness="1" CornerRadius="2" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.TabIndex="2">

                                <!-- The implementation switches the content. This control must be named PART_SelectedContentHost -->
                                <ContentPresenter Margin="4" x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" />

                            </Border>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="{x:Static SystemCommands.CloseWindowCommand}" CanExecute="CommandBinding_CanExecute_Close" Executed="CommandBinding_Executed_Close" />
        <CommandBinding Command="{x:Static SystemCommands.MaximizeWindowCommand}" CanExecute="CommandBinding_CanExecute_Close" Executed="CommandBinding_Executed_Maximize" />
        <CommandBinding Command="{x:Static SystemCommands.MinimizeWindowCommand}" CanExecute="CommandBinding_CanExecute_Close" Executed="CommandBinding_Executed_Minimize" />
    </Window.CommandBindings>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding CloseWindow}"  />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Window.DataContext>
        <local:LyncVM/>
    </Window.DataContext>
    <Grid Background="{DynamicResource TitleBarBrush}">
        <Grid.RowDefinitions>
            <RowDefinition Height="40"/>
            <RowDefinition Height="100*"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="1" Margin="5" Background="{DynamicResource WindowBackgroundBrush}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="195"/>
                <ColumnDefinition Width="30"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid HorizontalAlignment="Left" Width="200" Grid.ColumnSpan="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="230"/>
                    <RowDefinition Height="250"/>
                </Grid.RowDefinitions>
                <Grid Margin="10,0,10,55" Background="{DynamicResource PanelBackgroundBrush}" Grid.Row="1">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="95"/>
                        <RowDefinition Height="82.5"/>
                    </Grid.RowDefinitions>

                    <controls:MyStatusArea Grid.Row="1" Grid.Column="0" Height="98" Margin="10,7,8,0" VerticalAlignment="Top" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Grid.RowSpan="2"/>

                    <Rectangle Fill="{DynamicResource ItemGroupingBoxBrush}" HorizontalAlignment="Left" Height="55" Margin="10,5,0,0" VerticalAlignment="Top" Width="160" Grid.Row="2"/>
                    <StackPanel Margin="17,13,0,0" Orientation="Vertical" Grid.Row="2" Height="69.5" VerticalAlignment="Top">
                        <StackPanel Orientation="Horizontal" >
                            <TextBlock Height="20" TextWrapping="Wrap" Width="50" Text="Mic:" TextAlignment="Right" VerticalAlignment="Top" Foreground="#FF6E6E6E" FontWeight="Bold" HorizontalAlignment="Right"/>
                            <TextBlock HorizontalAlignment="Left" Height="20" TextWrapping="Wrap" Text="{Binding micState}" VerticalAlignment="Top" Width="90" FontWeight="Bold" Margin="5,0,0,0"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" >
                            <TextBlock Height="20" Text="Camera:"  TextAlignment="Right" VerticalAlignment="Top" Foreground="{DynamicResource FieldTitleBrush}" FontWeight="Bold" HorizontalAlignment="Right" Width="50"/>
                            <TextBlock HorizontalAlignment="Left" Height="20" TextWrapping="Wrap" Text="{Binding videoStatus}" VerticalAlignment="Top" Width="90" FontWeight="Bold" Margin="5,0,0,0"/>
                        </StackPanel>
                    </StackPanel>
                    <Rectangle Fill="{DynamicResource TitleBarBrush}" HorizontalAlignment="Left" Height="30" VerticalAlignment="Top" Stretch="UniformToFill" Width="180"/>
                    <StackPanel Margin="1,2,10,4.737" Orientation="Horizontal" Grid.Row="0">
                        <Image HorizontalAlignment="Left" Height="20" VerticalAlignment="Top" Width="20" Source="Icons/Lync-2013-logo-128x128.png" Margin="0,2,0,0"/>
                        <TextBlock HorizontalAlignment="Left" Height="25" Margin="7,3,0,0" TextWrapping="Wrap" Text="Lync Status" VerticalAlignment="Top" Width="130" Foreground="{DynamicResource TitleForegroundBrush}" FontSize="14.667"/>
                    </StackPanel>
                </Grid>
                <Grid Margin="10" Background="{DynamicResource PanelBackgroundBrush}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="115"/>
                        <RowDefinition Height="68"/>
                    </Grid.RowDefinitions>
                    <Rectangle Fill="{DynamicResource ItemGroupingBoxBrush}" HorizontalAlignment="Left" Height="50" Margin="10,5,0,0" VerticalAlignment="Top" Width="160" Grid.Row="2"/>
                    <StackPanel Margin="17,12,0,0" Orientation="Vertical" Grid.Row="2">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Height="20" TextWrapping="Wrap" Text="USB Status:" TextAlignment="Right" VerticalAlignment="Top" Foreground="#FF6E6E6E" FontWeight="Bold" HorizontalAlignment="Right" Width="66"/>
                            <TextBlock HorizontalAlignment="Left" Height="20" TextWrapping="Wrap" Text="{Binding comLinkStatus}" VerticalAlignment="Top" Width="90" FontWeight="Bold" Foreground="Black" Margin="6,0,0,0"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Height="20" TextWrapping="Wrap" Text="Color:" TextAlignment="Right" VerticalAlignment="Top" Foreground="#FF6E6E6E" FontWeight="Bold" HorizontalAlignment="Right" Width="66"/>
                            <TextBlock HorizontalAlignment="Left" Height="20" TextWrapping="Wrap" Text="{Binding currentLightColor, Mode=OneWay}" VerticalAlignment="Top" Width="90" FontWeight="Bold" Foreground="Black" Margin="6,0,0,0"/>
                        </StackPanel>
                    </StackPanel>
                    <Rectangle Fill="{DynamicResource TitleBarBrush}" HorizontalAlignment="Left" Height="30" VerticalAlignment="Top" Stretch="UniformToFill" Width="180"/>
                    <Image HorizontalAlignment="Left" Margin="10,29,0,0" VerticalAlignment="Top" Width="80" Source="Icons/lyncLyteUSB.png" Height="60" Grid.Row="1" Visibility="{Binding IsLinkAvailable, Converter={StaticResource BooleanToVisibilityConverter} }"/>
                    <Image HorizontalAlignment="Left" Margin="10,29,0,0" VerticalAlignment="Top" Width="80" Source="Icons/lyncLyteUSBError.png" Height="60" Grid.Row="1" Visibility="{Binding IsLinkAvailable, Converter={StaticResource USBErrorImageConverter} }"/>

                    <StackPanel Margin="1,2,10,4.737" Orientation="Horizontal" Grid.Row="0">
                        <Image HorizontalAlignment="Left" Height="20" VerticalAlignment="Top" Width="20" Source="Icons/usb icon.png" Margin="0,2,0,0"/>
                        <TextBlock HorizontalAlignment="Left" Height="25" Margin="7,3,0,0" TextWrapping="Wrap" Text="Device Status" VerticalAlignment="Top" Width="130" Foreground="{DynamicResource TitleForegroundBrush}" FontSize="14.667"/>
                    </StackPanel>
                    <Image HorizontalAlignment="Left" Height="121" Margin="90,26,0,0" VerticalAlignment="Top" Width="90" Source="{Binding currentLight, Converter={StaticResource LightToIconFilenameConverter}}" Grid.RowSpan="3"/>
                </Grid>
            </Grid>
            <Grid Grid.Column="2" Visibility="{Binding IsExpanded, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=VisToggle}" >
                <Grid Margin="4,10,10,10" Background="{DynamicResource PanelBackgroundBrush}"  Width="646">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="78*"/>
                        <RowDefinition Height="337*"/>
                        <RowDefinition Height="0"/>
                    </Grid.RowDefinitions>
                    <TabControl Style="{DynamicResource TabStyle}" Margin="10" Grid.RowSpan="2">
                        <TabItem Header="Color Assignment" FontWeight="Bold" Style="{DynamicResource FatTabStyle}" TabIndex="1">
                            <Grid Background="#FFE5E5E5">
                                <Grid.Resources>
                                    <DataTemplate x:Key="CustomTemplate">
                                        <StackPanel Orientation="Horizontal">
                                            <Image Source="/Icons/circlearrow.png" Height="16" Width="16" Margin="0,0,4,0" Visibility="{Binding IsActive, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                            <TextBlock Text="{Binding StatusName}" TextWrapping="Wrap" Background="Transparent" FontWeight="Normal" />
                                        </StackPanel>

                                    </DataTemplate>
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="20"/>
                                    <RowDefinition/>
                                    <RowDefinition Height="55"/>
                                </Grid.RowDefinitions>

                                <TextBlock HorizontalAlignment="Left" Grid.Row="2" TextWrapping="Wrap" Foreground="{DynamicResource FieldTitleBrush}" Grid.ColumnSpan="4" FontWeight="Normal" Height="31.92" Width="635.563" Margin="7,0,0,0"><Run Text="Drag and drop Lync Presence states between boxes to change the light for that presence. "/><LineBreak/><Run Text="New Presence types default to Off."/></TextBlock>

                                <TextBlock Grid.Row="0" Grid.Column="0" Margin="5,0,0,0" Text="Red" />
                                <TextBlock Grid.Row="0" Grid.Column="1" Margin="5,0,0,0" Text="Yellow" />
                                <TextBlock Grid.Row="0" Grid.Column="2" Margin="5,0,0,0" Text="Green"/>
                                <TextBlock Grid.Row="0" Grid.Column="3" Margin="5,0,0,0" Text="Off" />

                                <ListBox  Grid.Column="0"
									Grid.Row="1"
									Background="Pink"
									x:Name="RedList"
									ItemsSource="{Binding redLights.userStatuses}"
									ItemTemplate="{StaticResource CustomTemplate}"
                      
									dd:DragDrop.IsDragSource="True"
									dd:DragDrop.IsDropTarget="True" 
									dd:DragDrop.DropHandler= "{Binding}"
									dd:DragDrop.DragAdornerTemplate="{StaticResource CustomTemplate}" />
                                <ListBox Grid.Column="1"
									Grid.Row="1"
									Background="#FFFFFFA2"
									ItemsSource="{Binding yellowLights.userStatuses}"
									ItemTemplate="{StaticResource CustomTemplate}"
                      
									dd:DragDrop.DropHandler= "{Binding}"
									dd:DragDrop.IsDragSource="True"
									dd:DragDrop.IsDropTarget="True"
									dd:DragDrop.DragAdornerTemplate="{StaticResource CustomTemplate}" />
                                <ListBox Grid.Column="2"
									Grid.Row="1"
									Background="LightGreen"
									ItemsSource="{Binding greenLights.userStatuses}"
									ItemTemplate="{StaticResource CustomTemplate}"
                      
									dd:DragDrop.DropHandler= "{Binding}"
									dd:DragDrop.IsDragSource="True"
									dd:DragDrop.IsDropTarget="True"
									dd:DragDrop.DragAdornerTemplate="{StaticResource CustomTemplate}" />
                                <ListBox Grid.Column="3"
									Grid.Row="1"
									Background="LightGray"
									ItemsSource="{Binding offLights.userStatuses}"
									ItemTemplate="{StaticResource CustomTemplate}"
                      
									dd:DragDrop.DropHandler= "{Binding}"
									dd:DragDrop.IsDragSource="True"
									dd:DragDrop.IsDropTarget="True"
									dd:DragDrop.DragAdornerTemplate="{StaticResource CustomTemplate}" />

                            </Grid>
                        </TabItem>
                        <TabItem Header="Dweet.io" FontWeight="Bold" Style="{DynamicResource FatTabStyle}" TabIndex="3">
                            <Grid Background="{DynamicResource PanelBackgroundBrush}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="21"/>
                                    <RowDefinition Height="45"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <StackPanel Grid.Column="0" Grid.Row="1" Orientation="Horizontal" >
                                    <CheckBox IsChecked="{Binding useDweet}" VerticalAlignment="Center" Margin="0,8" Content="Use Dweet"/>
                                    <Label Padding="10,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="10,7" Content="Dweet Thing:"/>
                                    <TextBox VerticalAlignment="Center" Width="200" Text="{Binding dweetThingName}" />
                                </StackPanel>
                            </Grid>
                        </TabItem>
                        <TabItem Header="ThingSpeak" FontWeight="Bold" Style="{DynamicResource FatTabStyle}" TabIndex="4">
                            <Grid Background="{DynamicResource PanelBackgroundBrush}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="36"/>
                                    <RowDefinition Height="40"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <StackPanel Grid.Column="0" Grid.Row="1" Orientation="Horizontal">
                                    <CheckBox IsChecked="{Binding useThingSpeak}" VerticalAlignment="Center" Margin="0,8" Content="Use ThingSpeak"/>
                                    <Label Padding="10,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="10,7" Content="ID:"/>
                                    <TextBox VerticalAlignment="Center" Width="50" Text="{Binding thingID}" />
                                    <Label Padding="10,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="10,7" Content="Key:"/>
                                    <TextBox VerticalAlignment="Center" Width="124" Text="{Binding thingWriteKey}" />

                                    <Label Padding="10,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="10,7" Content="Base URL:"/>
                                    <TextBox VerticalAlignment="Center" Width="124" Text="{Binding thingBaseURL}" />
                                </StackPanel>
                            </Grid>
                        </TabItem>

                        <TabItem Header="Manual Control" FontWeight="Bold" Style="{DynamicResource FatTabStyle}" TabIndex="2">
                            <Grid Background="{DynamicResource PanelBackgroundBrush}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="8*"/>
                                    <RowDefinition Height="205*"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="130"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="99"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Row="1" Grid.Column="0" Text="Manual Override:" HorizontalAlignment="Right" Margin="0,7,11,0"/>
                                <StackPanel Orientation="Vertical" Grid.Column="1" Grid.Row="1" >
                                    <StackPanel.Resources>
                                        <SolidColorBrush x:Key="selectedBrush" Color="LightBlue" TextBlock.FontWeight="Bold" />
                                        <ControlTemplate x:Key="ToggleButtonCac" TargetType="{x:Type ToggleButton}">
                                            <Border x:Name="Border" MinHeight="40" MinWidth="120" Background="LightGray" CornerRadius="0" BorderBrush="Black" BorderThickness="1,1,1,1" Margin="0,0,0,10" >
                                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}" TextBlock.FontWeight="Normal" TextBlock.FontSize="18" TextBlock.Foreground="Black" />
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsChecked" Value="true" />
                                                    </MultiTrigger.Conditions>
                                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource selectedBrush}" />
                                                    <Setter TargetName="Border" Property="TextBlock.FontWeight" Value="Bold" />

                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="true" />
                                                        <Condition Property="IsChecked" Value="false" />
                                                    </MultiTrigger.Conditions>
                                                    <Setter TargetName="Border" Property="Background" Value="White" />
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsEnabled" Value="false" />
                                                    </MultiTrigger.Conditions>
                                                    <Setter TargetName="Border" Property="Opacity" Value="0.40"/>
                                                </MultiTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </StackPanel.Resources>
                                    <RadioButton Style="{StaticResource {x:Type ToggleButton}}" Content="Red" GroupName="Manual" 
										Template="{DynamicResource ToggleButtonCac}" 
										Command="{Binding TestLight}" CommandParameter="RED"
										IsEnabled="{Binding IsLinkAvailable}" />
                                    <RadioButton Style="{StaticResource {x:Type ToggleButton}}" Content="Yellow" GroupName="Manual" 
										Template="{DynamicResource ToggleButtonCac}"
										Command="{Binding TestLight}" CommandParameter="YELLOW" IsEnabled="{Binding IsLinkAvailable}"/>
                                    <RadioButton Style="{StaticResource {x:Type ToggleButton}}" Content="Green" GroupName="Manual" 
										Template="{DynamicResource ToggleButtonCac}"
										Command="{Binding TestLight}" CommandParameter="GREEN" IsEnabled="{Binding IsLinkAvailable}"/>
                                    <RadioButton Style="{StaticResource {x:Type ToggleButton}}" Content="Off"  GroupName="Manual" 
										Template="{DynamicResource ToggleButtonCac}"
										Command="{Binding TestLight}" CommandParameter="OFF" IsEnabled="{Binding IsLinkAvailable}"/>
                                    <RadioButton Style="{StaticResource {x:Type ToggleButton}}" Content="Cycle"  GroupName="Manual" 
										Template="{DynamicResource ToggleButtonCac}"
										Command="{Binding TestLight}" CommandParameter="CYCLE" IsEnabled="{Binding IsLinkAvailable}"/>
                                    <RadioButton Style="{StaticResource {x:Type ToggleButton}}" Content="Lync" Margin="0,20,0,0" GroupName="Manual" 
										Template="{DynamicResource ToggleButtonCac}" IsChecked="True"
										Command="{Binding TestLight}" CommandParameter="UNKNOWN" IsEnabled="{Binding IsLinkAvailable}"/>
                                </StackPanel>
                            </Grid>
                        </TabItem>
                        <TabItem Header="About" FontWeight="Bold" Style="{DynamicResource FatTabStyle}" TabIndex="5">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="31"/>
                                    <RowDefinition Height="18*"/>
                                    <RowDefinition Height="7*"/>
                                </Grid.RowDefinitions>
                                <RichTextBox Margin="5,0" Grid.Row="1" IsEnabled="False" AllowDrop="False" Focusable="False" IsHitTestVisible="False" IsTabStop="False" VerticalScrollBarVisibility="Auto" Foreground="Black">
                                    <FlowDocument>
                                        <Paragraph>
                                            <Run FontWeight="Normal" Text="This application is for use in conjunction with the LyncLyte USB transmitter and display light, and/or the LyncLyte Cloud receiver. "/>
                                        </Paragraph>
                                        <Paragraph>
                                            <Run FontWeight="Normal" Text="Lync must be installed on this computer for LyncLyte to function."/>
                                        </Paragraph>
                                        <Paragraph>
                                            <Run FontWeight="Normal" Text="This application must be running for your LyncLyte to update colors based on your activity."/>
                                        </Paragraph>
                                    </FlowDocument>
                                </RichTextBox>

                            </Grid>
                        </TabItem>
                    </TabControl>
                </Grid>
            </Grid>
            <StackPanel Grid.Column="1" Margin="0,10,0,0" Orientation="Vertical">
                <Expander x:Name="VisToggle" VerticalAlignment="Top" ExpandDirection="Right" IsExpanded="True" Width="25"  />
                <TextBlock Foreground="{DynamicResource TitleBarBrush}" Text="Settings" HorizontalAlignment="Center" VerticalAlignment="Top" >
                    <TextBlock.LayoutTransform>
                        <TransformGroup>
                            <ScaleTransform/>
                            <SkewTransform/>
                            <RotateTransform Angle="-90"/>
                            <TranslateTransform/>
                        </TransformGroup>
                    </TextBlock.LayoutTransform>
                </TextBlock>

            </StackPanel>
        </Grid>
        <Grid Grid.Row="0" MouseLeftButtonDown="Grid_MouseLeftButtonDown">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="40"/>
                <ColumnDefinition/>
                <ColumnDefinition Width="114"/>
            </Grid.ColumnDefinitions>
            <Image Margin="5,4,0,0" Source="Icons/cc lynclyte logo.png" Grid.Column="0"/>
            <StackPanel Grid.ColumnSpan="2" Grid.Column="1" Margin="16,9,0,0" Orientation="Horizontal">
                <TextBlock Text="LyncLyte" Foreground="{DynamicResource TitleForegroundBrush}" FontSize="18.667" HorizontalAlignment="Stretch" Background="{x:Null}" Height="31"/>
                <TextBlock Text=" Configuration" Foreground="{DynamicResource TitleForegroundBrush}" FontSize="18.667" HorizontalAlignment="Stretch" Background="{x:Null}" Height="31" Visibility="{Binding IsExpanded, ElementName=VisToggle, Converter={StaticResource BooleanToVisibilityConverter}}" Width="688.083"/>
            </StackPanel>
            <StackPanel Grid.Column="2" Margin="10,0,0,0" Orientation="Horizontal">
                <Button Height="20" VerticalAlignment="Top" Width="30" Background="{x:Null}" Foreground="{DynamicResource TitleForegroundBrush}"
					Click="HideWindow" FontWeight="Bold" >
                    <Image Source="Icons/minimize_to_tray.png" />
                </Button>
                <Button Height="20" VerticalAlignment="Top" Width="30" Background="{x:Null}" Foreground="{DynamicResource TitleForegroundBrush}"
					Command="{x:Static SystemCommands.MinimizeWindowCommand}" FontWeight="Bold" >
                    <Image Source="Icons/minimize_window-bar.png" />
                </Button>
                <Button Height="20" VerticalAlignment="Top" Width="30" Background="{x:Null}" Foreground="{DynamicResource TitleForegroundBrush}"
					Command="{x:Static SystemCommands.CloseWindowCommand}" >
                    <Image Source="Icons/close_window-x.png" />
                </Button>

            </StackPanel>
        </Grid>
        <tb:TaskbarIcon x:Name="LLTaskbar" IconSource="{Binding currentLight, Converter={StaticResource LightToICOFilenameConverter}}" ToolTipText="{Binding currentLightColor}" DoubleClickCommand="{StaticResource ShowWindow}">
            <tb:TaskbarIcon.Resources>

            </tb:TaskbarIcon.Resources>
            <tb:TaskbarIcon.TrayPopup>
                <local:TrayPopUp  StatusText="{Binding currentLightColor}"
                                  LightImage="{Binding currentLight, Converter={StaticResource LightToIconFilenameConverter}}"
                                  UsbImage="{Binding IsLinkAvailable, Converter={StaticResource ComStatusToImageConverter}}"
                                  PopupRestore="MenuItemRestore_Click"
                                  />
            </tb:TaskbarIcon.TrayPopup>
            <tb:TaskbarIcon.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Show Configuration Window" Click="MenuItemRestore_Click"/>
                    <MenuItem Header="Exit LyncLyte" Click="MenuItemClose_Click"/>
                </ContextMenu>
            </tb:TaskbarIcon.ContextMenu>
        </tb:TaskbarIcon>
    </Grid>
</Window>
